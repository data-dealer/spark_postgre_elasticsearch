
volumes:
  postgresdb-volume:
  minio-volume:
  
services:
  postgres-db:
    image: postgres:12-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - /var/run/docker.sock:/host_docker/docker.sock
      - postgresdb-volume:/var/lib/postgresql/data
    networks:
      - global-network
    ports:
      - 5432:5432
    # entrypoint: |
    #   /bin/bash -c "
    #   sleep 5;
    #   psql --host /var/run/postgresql/.s.PGSQL.5432 -U postgres -c "CREATE USER airflow2 WITH PASSWORD 'airflow2@pass'"
    #   "
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}"]
      interval: 120s
      retries: 2
      start_period: 5s
      
  postgres-client:
    image: local/postgres-client
    container_name: postgres-client
    restart: "no"
    networks:
      - global-network
    environment:
      - PGPASSWORD=${PG_PASSWORD}
    # volumes:
      # - ./storage/postgres-init.sh:/tmp/postgres-init.sh
    # command: /tmp/postgres-init.sh
    depends_on:
      - postgres-db

  db-adminer:
    image: adminer
    container_name: db-adminer
    restart: always
    ports:
      - 8084:8080
    networks:
      - global-network

  minio:
    hostname: minio-server
    image: 'minio/minio:latest'
    container_name: minio-server
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${S3_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${S3_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - global-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      timeout: 20s
      retries: 3
    volumes:
      - minio-volume:/data

  mc-job:
    image: 'minio/mc:latest'
    container_name: mc-job
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config host add s3 ${S3_ENDPOINT} ${S3_ROOT_USER} ${S3_ROOT_PASSWORD} --api S3v4;
      /usr/bin/mc admin user add s3 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      /usr/bin/mc admin policy attach s3 readwrite --user=${S3_ACCESS_KEY};
      /usr/bin/mc ls s3;
      /usr/bin/mc mb --quiet s3/mlflow;
      /usr/bin/mc mb --quiet s3/datalake;
      /usr/bin/mc mb --quiet s3/artifacts;
      "
    volumes:
      - ./spark/rootpolicy.json:/tmp/rootpolicy.json
    depends_on:
      - minio
    networks:
      - global-network

networks:
  global-network:
    external: true
#{"dirpath":"spark_postgre_elasticsearch/","filename":"docker-compose-storage.yml"}
version: "3.7"

volumes:
  postgresdb-volume:
  minio-volume:
  
services:
  postgres-db:
    image: postgres:12-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - /var/run/docker.sock:/host_docker/docker.sock
      - postgresdb-volume:/var/lib/postgresql/data
    networks:
      - global-network
    ports:
      - 5432:5432
    # entrypoint: |
    #   /bin/bash -c "
    #   sleep 5;
    #   psql --host /var/run/postgresql/.s.PGSQL.5432 -U postgres -c "CREATE USER airflow2 WITH PASSWORD 'airflow2@pass'"
    #   "
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}"]
      interval: 120s
      retries: 2
      start_period: 5s
      
  postgres-client:
    image: local/postgres-client
    container_name: postgres-client
    restart: "no"
    networks:
      - global-network
    environment:
      - PGPASSWORD=${PG_PASSWORD}
    # volumes:
      # - ./storage/postgres-init.sh:/tmp/postgres-init.sh
    # command: /tmp/postgres-init.sh
    depends_on:
      - postgres-db

  db-adminer:
    image: adminer
    container_name: db-adminer
    restart: always
    ports:
      - 8084:8080
    networks:
      - global-network

  minio:
    hostname: minio-server
    image: 'minio/minio:latest'
    container_name: minio-server
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${S3_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${S3_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - global-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      timeout: 20s
      retries: 3
    volumes:
      - minio-volume:/data

  mc-job:
    image: 'minio/mc:latest'
    container_name: mc-job
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config host add s3 ${S3_ENDPOINT} ${S3_ROOT_USER} ${S3_ROOT_PASSWORD} --api S3v4;
      /usr/bin/mc admin user add s3 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      /usr/bin/mc admin policy attach s3 readwrite --user=${S3_ACCESS_KEY};
      /usr/bin/mc ls s3;
      /usr/bin/mc mb --quiet s3/mlflow;
      /usr/bin/mc mb --quiet s3/datalake;
      /usr/bin/mc mb --quiet s3/artifacts;
      "
    volumes:
      - ./spark/rootpolicy.json:/tmp/rootpolicy.json
    depends_on:
      - minio
    networks:
      - global-network

networks:
  global-network:
    external: true
